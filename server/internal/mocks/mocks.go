// Code generated by MockGen. DO NOT EDIT.
// Source: C:\Users\zzzAR\OneDrive\Рабочий стол\Мои проекты на go\test_task2\test_task\server\internal\interfaces\interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	net "net"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockQuoteProvider is a mock of QuoteProvider interface.
type MockQuoteProvider struct {
	ctrl     *gomock.Controller
	recorder *MockQuoteProviderMockRecorder
}

// MockQuoteProviderMockRecorder is the mock recorder for MockQuoteProvider.
type MockQuoteProviderMockRecorder struct {
	mock *MockQuoteProvider
}

// NewMockQuoteProvider creates a new mock instance.
func NewMockQuoteProvider(ctrl *gomock.Controller) *MockQuoteProvider {
	mock := &MockQuoteProvider{ctrl: ctrl}
	mock.recorder = &MockQuoteProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuoteProvider) EXPECT() *MockQuoteProviderMockRecorder {
	return m.recorder
}

// GetRandomQuote mocks base method.
func (m *MockQuoteProvider) GetRandomQuote() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomQuote")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRandomQuote indicates an expected call of GetRandomQuote.
func (mr *MockQuoteProviderMockRecorder) GetRandomQuote() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomQuote", reflect.TypeOf((*MockQuoteProvider)(nil).GetRandomQuote))
}

// MockPOWService is a mock of POWService interface.
type MockPOWService struct {
	ctrl     *gomock.Controller
	recorder *MockPOWServiceMockRecorder
}

// MockPOWServiceMockRecorder is the mock recorder for MockPOWService.
type MockPOWServiceMockRecorder struct {
	mock *MockPOWService
}

// NewMockPOWService creates a new mock instance.
func NewMockPOWService(ctrl *gomock.Controller) *MockPOWService {
	mock := &MockPOWService{ctrl: ctrl}
	mock.recorder = &MockPOWServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPOWService) EXPECT() *MockPOWServiceMockRecorder {
	return m.recorder
}

// GenerateChallenge mocks base method.
func (m *MockPOWService) GenerateChallenge(length int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateChallenge", length)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateChallenge indicates an expected call of GenerateChallenge.
func (mr *MockPOWServiceMockRecorder) GenerateChallenge(length interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateChallenge", reflect.TypeOf((*MockPOWService)(nil).GenerateChallenge), length)
}

// VerifySolution mocks base method.
func (m *MockPOWService) VerifySolution(challenge, solution string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "VerifySolution", challenge, solution)
	ret0, _ := ret[0].(bool)
	return ret0
}

// VerifySolution indicates an expected call of VerifySolution.
func (mr *MockPOWServiceMockRecorder) VerifySolution(challenge, solution interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "VerifySolution", reflect.TypeOf((*MockPOWService)(nil).VerifySolution), challenge, solution)
}

// MockRateLimiter is a mock of RateLimiter interface.
type MockRateLimiter struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimiterMockRecorder
}

// MockRateLimiterMockRecorder is the mock recorder for MockRateLimiter.
type MockRateLimiterMockRecorder struct {
	mock *MockRateLimiter
}

// NewMockRateLimiter creates a new mock instance.
func NewMockRateLimiter(ctrl *gomock.Controller) *MockRateLimiter {
	mock := &MockRateLimiter{ctrl: ctrl}
	mock.recorder = &MockRateLimiterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRateLimiter) EXPECT() *MockRateLimiterMockRecorder {
	return m.recorder
}

// IsAllowed mocks base method.
func (m *MockRateLimiter) IsAllowed(ip string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsAllowed", ip)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsAllowed indicates an expected call of IsAllowed.
func (mr *MockRateLimiterMockRecorder) IsAllowed(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockRateLimiter)(nil).IsAllowed), ip)
}

// MockMetricsCollector is a mock of MetricsCollector interface.
type MockMetricsCollector struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsCollectorMockRecorder
}

// MockMetricsCollectorMockRecorder is the mock recorder for MockMetricsCollector.
type MockMetricsCollectorMockRecorder struct {
	mock *MockMetricsCollector
}

// NewMockMetricsCollector creates a new mock instance.
func NewMockMetricsCollector(ctrl *gomock.Controller) *MockMetricsCollector {
	mock := &MockMetricsCollector{ctrl: ctrl}
	mock.recorder = &MockMetricsCollectorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsCollector) EXPECT() *MockMetricsCollectorMockRecorder {
	return m.recorder
}

// DecActiveConnections mocks base method.
func (m *MockMetricsCollector) DecActiveConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DecActiveConnections")
}

// DecActiveConnections indicates an expected call of DecActiveConnections.
func (mr *MockMetricsCollectorMockRecorder) DecActiveConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecActiveConnections", reflect.TypeOf((*MockMetricsCollector)(nil).DecActiveConnections))
}

// GetActiveConnections mocks base method.
func (m *MockMetricsCollector) GetActiveConnections() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveConnections")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetActiveConnections indicates an expected call of GetActiveConnections.
func (mr *MockMetricsCollectorMockRecorder) GetActiveConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveConnections", reflect.TypeOf((*MockMetricsCollector)(nil).GetActiveConnections))
}

// GetStats mocks base method.
func (m *MockMetricsCollector) GetStats() map[string]int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(map[string]int64)
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockMetricsCollectorMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockMetricsCollector)(nil).GetStats))
}

// IncActiveConnections mocks base method.
func (m *MockMetricsCollector) IncActiveConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncActiveConnections")
}

// IncActiveConnections indicates an expected call of IncActiveConnections.
func (mr *MockMetricsCollectorMockRecorder) IncActiveConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncActiveConnections", reflect.TypeOf((*MockMetricsCollector)(nil).IncActiveConnections))
}

// IncFailedChallenges mocks base method.
func (m *MockMetricsCollector) IncFailedChallenges() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncFailedChallenges")
}

// IncFailedChallenges indicates an expected call of IncFailedChallenges.
func (mr *MockMetricsCollectorMockRecorder) IncFailedChallenges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncFailedChallenges", reflect.TypeOf((*MockMetricsCollector)(nil).IncFailedChallenges))
}

// IncSuccessChallenges mocks base method.
func (m *MockMetricsCollector) IncSuccessChallenges() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncSuccessChallenges")
}

// IncSuccessChallenges indicates an expected call of IncSuccessChallenges.
func (mr *MockMetricsCollectorMockRecorder) IncSuccessChallenges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncSuccessChallenges", reflect.TypeOf((*MockMetricsCollector)(nil).IncSuccessChallenges))
}

// IncTotalConnections mocks base method.
func (m *MockMetricsCollector) IncTotalConnections() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTotalConnections")
}

// IncTotalConnections indicates an expected call of IncTotalConnections.
func (mr *MockMetricsCollectorMockRecorder) IncTotalConnections() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTotalConnections", reflect.TypeOf((*MockMetricsCollector)(nil).IncTotalConnections))
}

// IncTotalQuotesSent mocks base method.
func (m *MockMetricsCollector) IncTotalQuotesSent() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncTotalQuotesSent")
}

// IncTotalQuotesSent indicates an expected call of IncTotalQuotesSent.
func (mr *MockMetricsCollectorMockRecorder) IncTotalQuotesSent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncTotalQuotesSent", reflect.TypeOf((*MockMetricsCollector)(nil).IncTotalQuotesSent))
}

// Wait mocks base method.
func (m *MockMetricsCollector) Wait() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Wait")
}

// Wait indicates an expected call of Wait.
func (mr *MockMetricsCollectorMockRecorder) Wait() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Wait", reflect.TypeOf((*MockMetricsCollector)(nil).Wait))
}

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockLogger) Error(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// Info mocks base method.
func (m *MockLogger) Info(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Info", varargs...)
}

// Info indicates an expected call of Info.
func (mr *MockLoggerMockRecorder) Info(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockLogger)(nil).Info), varargs...)
}

// MockConnection is a mock of Connection interface.
type MockConnection struct {
	ctrl     *gomock.Controller
	recorder *MockConnectionMockRecorder
}

// MockConnectionMockRecorder is the mock recorder for MockConnection.
type MockConnectionMockRecorder struct {
	mock *MockConnection
}

// NewMockConnection creates a new mock instance.
func NewMockConnection(ctrl *gomock.Controller) *MockConnection {
	mock := &MockConnection{ctrl: ctrl}
	mock.recorder = &MockConnectionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConnection) EXPECT() *MockConnectionMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockConnection) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockConnectionMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConnection)(nil).Close))
}

// Read mocks base method.
func (m *MockConnection) Read(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockConnectionMockRecorder) Read(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockConnection)(nil).Read), b)
}

// RemoteAddr mocks base method.
func (m *MockConnection) RemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// RemoteAddr indicates an expected call of RemoteAddr.
func (mr *MockConnectionMockRecorder) RemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoteAddr", reflect.TypeOf((*MockConnection)(nil).RemoteAddr))
}

// SetDeadline mocks base method.
func (m *MockConnection) SetDeadline(t time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeadline", t)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeadline indicates an expected call of SetDeadline.
func (mr *MockConnectionMockRecorder) SetDeadline(t interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeadline", reflect.TypeOf((*MockConnection)(nil).SetDeadline), t)
}

// Write mocks base method.
func (m *MockConnection) Write(b []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", b)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockConnectionMockRecorder) Write(b interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockConnection)(nil).Write), b)
}

// MockServer is a mock of Server interface.
type MockServer struct {
	ctrl     *gomock.Controller
	recorder *MockServerMockRecorder
}

// MockServerMockRecorder is the mock recorder for MockServer.
type MockServerMockRecorder struct {
	mock *MockServer
}

// NewMockServer creates a new mock instance.
func NewMockServer(ctrl *gomock.Controller) *MockServer {
	mock := &MockServer{ctrl: ctrl}
	mock.recorder = &MockServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockServer) EXPECT() *MockServerMockRecorder {
	return m.recorder
}

// Start mocks base method.
func (m *MockServer) Start(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockServerMockRecorder) Start(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockServer)(nil).Start), ctx)
}

// Stop mocks base method.
func (m *MockServer) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockServerMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockServer)(nil).Stop))
}
